head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2018.10.15.12.59.08;	author ohsaki;	state Exp;
branches;
next	1.1;

1.1
date	2018.05.27.08.33.33;	author ohsaki;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@#!/usr/bin/env3 python3
#
# A class for Grid-style underlying path.
# Copyright (c) 2011-2018, Hiroyuki Ohsaki.
# All rights reserved.
#
# $Id: grid.py,v 1.1 2018/05/27 08:33:33 ohsaki Exp ohsaki $
#

import graphtools

from dtnsim.path.line import Line
from vector import Vector as V

class Grid(Line):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # create a grid topology
        g = graphtools.Graph(directed=False)
        self.graph = g
        g.create_graph('lattice', 2, self.size)

        # save the positions of vertices as Vector object
        for j in range(1, self.size + 1):
            for i in range(1, self.size + 1):
                v = g._lattice_vertex(2, self.size, i, j)
                x, y = ((0.5 + i - 1) / self.size * self.width,
                        (0.5 + j - 1) / self.size * self.height)
                g.set_vertex_attribute(v, 'xy', V(x, y))
        self.compute_edge_lengths()
@


1.1
log
@Initial revision
@
text
@d3 2
a4 2
#
# Copyright (c) 2011, Hiroyuki Ohsaki.
d7 1
a7 1
# $Id: Grid.pm,v 1.15 2015/12/09 14:45:23 ohsaki Exp $
a14 3
from pdb import set_trace as tr


d18 2
a19 3

        # create underlying network topology
        g = graphtools.Graph(directed=True, multiedged=True)
d23 1
a23 1
        # save the positions of vertices as Math::Vector object
@
