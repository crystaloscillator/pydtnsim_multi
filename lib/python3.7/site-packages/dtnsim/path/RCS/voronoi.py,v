head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2018.10.15.13.01.53;	author ohsaki;	state Exp;
branches;
next	1.1;

1.1
date	2018.05.27.08.33.47;	author ohsaki;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@#!/usr/bin/env3 python3
#
#
# Copyright (c) 2011-2015, Hiroyuki Ohsaki.
# All rights reserved.
#
# $Id: voronoi.py,v 1.1 2018/05/27 08:33:47 ohsaki Exp ohsaki $
#

import graphtools

from dtnsim.path.line import Line
from vector import Vector as V

class Voronoi(Line):
    def __init__(self, npoints=100, *args, **kwargs):
        self.npoints = npoints
        super().__init__(*args, **kwargs)

        # create a Voronoi topology
        g = graphtools.Graph(directed=False)
        self.graph = g
        g.create_graph('voronoi', self.npoints, self.width, self.height)

        # save the positions of vertices as Vector object
        for v in g.vertices():
            x, y = g.get_vertex_attribute(v, 'pos').split(',')
            x, y = float(x), float(y)
            g.set_vertex_attribute(v, 'xy', V(x, y))

        self.compute_edge_lengths()
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
# $Id: Voronoi.pm,v 1.22 2015/12/09 14:45:23 ohsaki Exp $
a14 1

d20 2
a21 2
        # create underlying network topology
        g = graphtools.Graph(directed=False, multiedged=True)
d25 1
a25 1
        # save the positions of vertices as Math::Vector object
d28 1
a31 1
        return self
@
