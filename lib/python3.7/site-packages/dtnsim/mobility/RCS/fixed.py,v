head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2018.10.15.12.28.56;	author ohsaki;	state Exp;
branches;
next	1.1;

1.1
date	2018.05.27.08.32.34;	author ohsaki;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@#!/usr/bin/env python3
#
# A mobility class for stationary agents.
# Copyright (c) 2013-2018, Hiroyuki Ohsaki.
# All rights reserved.
#
# Id: Fixed.pm,v 1.13 2015/12/30 02:54:47 ohsaki Exp $
#

import math, random
from vector import Vector as V

class Fixed:
    def __init__(self, width=1000, height=1000, current=None, *kargs,
                 **kwargs):
        self.width = width
        self.height = height
        if current is None:
            current = self.random_coordinate()
        self.current = current
        self.wait = True

    def __repr__(self):
        return f'({self.current[0]:.2f}, {self.current[1]:.2f}) {self.width} x {self.height}'

    def random_coordinate(self):
        """Pick a random coordinate on the field."""
        return V(random.uniform(0, self.width), random.uniform(0, self.height))

    def angle_between_vectors(self, v1, v2):
        """Return the angle between two vectors V1 and V2."""
        if abs(v1) == 0 or abs(v2) == 0:
            return math.pi / 2
        try:
            return math.acos((v1 * v2) / (abs(v1) * abs(v2)))
        except ValueError:
            return math.pi / 2  # ???

    def move(self, delta):
        """Move the agent for the duration of DELTA."""
        pass
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
# Copyright (c) 2013-2015, Hiroyuki Ohsaki.
a12 1

d14 2
a15 2
    # create and initialize the object
    def __init__(self, width=1000, height=1000, current=None, *args, **kwargs):
a25 1
    # pick a random coordinate on the field
d27 1
a29 1
    # return the angle between two vectors
d31 1
d34 4
a38 3
        return math.acos((v1 * v2) / (abs(v1) * abs(v2)))

    # move the agent for the duration of DELTA
d40 1
@
