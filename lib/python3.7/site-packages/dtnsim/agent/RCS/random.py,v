head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2018.10.15.12.27.05;	author ohsaki;	state Exp;
branches;
next	1.1;

1.1
date	2018.05.27.08.32.13;	author ohsaki;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@#!/usr/bin/env python3
#
# An implementation of a single-copy random routing.
# Copyright (c) 2011-2018, Hiroyuki Ohsaki.
# All rights reserved.
#
# Id: Random.pm,v 1.4 2015/12/09 14:45:23 ohsaki Exp $
#

import random

from dtnsim.agent.carryonly import CarryOnly

DEFAULT_FORWARD_PROB = 0.5

class Random(CarryOnly):
    def __init__(self, forward_prob=DEFAULT_FORWARD_PROB):
        super().__init__()
        self.forward_prob = forward_prob

    def forward(self):
        """Try to deliver its carrying messages to all encountered agents."""
        encounters = self.encounters()
        for agent in encounters:
            for msg in self.pending_messages():
                dst = self.msg_dst(msg)
                if agent.id_ == dst:
                    self.sendmsg(agent, msg)
                    del self.received[msg]
                    self.delivered[msg] += 1
                else:
                    if random.uniform(0, 1) > self.forward_prob:
                        continue
                    self.sendmsg(agent, msg)
                    del self.received[msg]
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
# Copyright (c) 2011-2015, Hiroyuki Ohsaki.
a15 1

a16 1
    # create and initialize the object
d22 1
d27 1
a27 1
                if agent.id == dst:
@
