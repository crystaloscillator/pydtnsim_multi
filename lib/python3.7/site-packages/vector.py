#!/usr/bin/env python3
#
#
# Copyright (c) 2018, Hiroyuki Ohsaki.
# All rights reserved.
#
# $Id: vector.py,v 1.3 2018/08/02 14:24:45 ohsaki Exp $
#

import math

class Vector:
    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y

    def __repr__(self):
        return f'Vector({self.x!r}, {self.y!r})'

    def __add__(self, obj):
        return Vector(self.x + obj.x, self.y + obj.y)

    def __sub__(self, obj):
        return Vector(self.x - obj.x, self.y - obj.y)

    def __mul__(self, obj):
        if isinstance(obj, Vector):
            return self.x * obj.x + self.y * obj.y
        else:
            return Vector(self.x * obj, self.y * obj)

    def __rmul__(self, obj):
        return self.__mul__(obj)

    def __truediv__(self, obj):
        return Vector(self.x / obj, self.y / obj)

    def __abs__(self):
        return math.sqrt(self.x**2 + self.y**2)

    def __getitem__(self, pos):
        if pos == 0:
            return self.x
        elif pos == 1:
            return self.y
        else:
            raise IndexError

    def __len__(self):
        return 2

def main():
    from test_more import eq, is_deeply
    v1 = Vector(1.2, 3.4)
    v2 = Vector(5.6, 7.8)
    is_deeply(v1, [1.2, 3.4])
    is_deeply(v1 + v2, [6.8, 11.2])
    is_deeply(v1 - v2, [1.2 - 5.6, 3.4 - 7.8])
    is_deeply(v1 * 2, [2.4, 6.8])
    is_deeply(2 * v1, [2.4, 6.8])
    is_deeply(v1 / 2, [0.6, 1.7])
    eq(abs(v1), math.sqrt(1.2**2 + 3.4**2))
    eq(v1[0], 1.2)
    eq(v1[1], 3.4)

if __name__ == "__main__":
    main()
