head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2018.10.15.12.54.39;	author ohsaki;	state Exp;
branches;
next	1.1;

1.1
date	2018.05.27.08.53.40;	author ohsaki;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@#!/usr/bin/env python3
#
# A mobility class for RandomWalk on a graph.
# Copyright (c) 2011-2018, Hiroyuki Ohsaki.
# All rights reserved.
#
# $Id: randomwalk.py,v 1.1 2018/05/27 08:53:40 ohsaki Exp ohsaki $
#

# NOTE: this program implements per-node random walk, rather than
# random walk on an edge.  An agent never goes back the currently
# walking edge.

import random

from dtnsim.mobility.graph.fixed import Fixed

class RandomWalk(Fixed):
    def __init__(self, vel_func=None, *args, **kwargs):
        super().__init__(*args, **kwargs)
        if vel_func is None:
            vel_func = lambda: 1.0  # 1.0 [m/s] by default
        self.velocity = None
        self.vel_func = vel_func

    def update_velocity(self):
        """Update agent's velocity."""
        self.velocity = self.vel_func()
        self.wait = False

    def select_route(self):
        """Randomly choose the next edge to go; this program assumes that the
        agent is currenly on the end of the edge."""
        edge = self.current_edge
        current_vertex = edge[1]
        neighbors = self.path.graph.neighbors(edge[1])
        next_vertex = random.choice(neighbors)
        self.move_to_point([current_vertex, next_vertex], 0)

    def move(self, delta):
        """Move the agent for the duration of DELTA."""
        self.update_velocity()

        # advance the agent by SPEED * DELTA
        step = self.velocity * delta
        self.current_offset += step
        self.update_current_cache()

        # if very close to either of corners, choose the next route
        length = self.edge_length(self.current_edge)
        if abs(self.current_offset -
               length) < step or self.current_offset > length:
            self.select_route()
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
# Copyright (c) 2011-2015, Hiroyuki Ohsaki.
d7 1
a7 1
# $Id: RandomWalk.pm,v 1.5 2015/12/09 14:45:23 ohsaki Exp $
a17 1

a18 2

    # create and initialize the object
d22 2
a23 1
            vel_func = lambda: 1.0
a25 1
    # update the agent's velocity
d27 1
a30 2
    # randomly choose the next edge to go; this program assumes that the
    # agent is currenly on the end of the edge
d32 2
a39 1
    # move the agent for the duration of DELTA
d41 1
d51 2
a52 2
        if abs(self.current_offset - length
               ) < step or self.current_offset > length:
@
